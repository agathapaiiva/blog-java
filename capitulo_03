Cap√≠tulo 03 | Fundamentos da linguagem

![java-icon](https://user-images.githubusercontent.com/40298927/174925141-07490c3f-d64f-4db3-b6b5-e32329127264.png) 

<p> Na base de qualquer linguagem de programa√ß√£o est√£o seus tipos de dados e operadores, e JAVA n√£o √© uma exce√ß√£o. Esses elementos definem os limites de uma linguagem e determina o tipo de tarefas √†s quais ela pode ser aplicada dentro de um sistema/aplica√ß√£o. Os tipos de dados s√£o especialmente importantes em JAVA porque a mesma √© considerada uma linguagem fortemente tipada.</p>

<p> A vari√°vel pode ser definida como um recurso das linguagens de programa√ß√£o utilizado para armazenar valores em mem√≥ria. Dessa forma sempre que precisarmos obter esse valor, basta referenciarmos. </p> 

**`Tipos Primitivos`**

![Capturar_select-area_20221207220550](https://user-images.githubusercontent.com/40298927/206331060-292042e1-6b49-4528-80c3-3e33869e6c10.png)

Vale ressaltar que o termo **primitivo** √© usado para indicar que esses tipos n√£o s√£o de objetos no sentindo de Orienta√ß√£o Objeto e sim valores bin√°rios comuns.

**`Tipos Inteiro`**

No Java √© definido quatro tipos inteiros: conforme apresentado na imagem a seguir: 

![Capturar_select-area_20221207225106](https://user-images.githubusercontent.com/40298927/206336611-1331e2da-2967-41e2-a9c6-226af7e7f37a.png)

O tipo inteiro mais usado √© **int**. Vari√°veis de tipo int costumam ser empregadas no controle de la√ßos, na indexa√ß√£o de arrays e na execu√ß√£o de c√°lculos inteiros para fins gerais.  

**`Tipos de ponto flutuante`**

Os tipos de ponto flutuante podem representar n√∫meros que t√™m componentes fracion√°rios. H√° dois tipos de ponto flutuante, **float** e **double**, que representam n√∫meros de precis√£o simples e dupla, respectivamente. 

 ![Capturar_select-area_20221207225119](https://user-images.githubusercontent.com/40298927/206336630-a7841181-ae77-43ac-972b-3e82df2fa998.png)

De ambos, o double √© mais usado, porque todas as fun√ß√µes matem√°ticas da biblioteca de classe Java usam valores double. 

Podemos conferir alguns exemplos de **`opera√ß√µes matem√°ticas/operadores aritm√©ticos`** utilizando os tipos de vari√°veis do Java. 

![Capturar_select-area_20230206231842](https://user-images.githubusercontent.com/40298927/217131167-a788b64b-6322-416f-9953-ecd6b530d359.png)

Ap√≥s entendermos sobre os tipo primitivos e como os operadores arim√©ticos s√£o aplicado no Java, a leitura a seguir ir√° abordar sobre **escopo de vari√°vel**.

O escopo de vari√°vel pode ser definido como um ambiente onde uma determinada vari√°vel pode ser acessada. No Java, o escopo de vari√°veis vai de acordo com o bloco onde a mesma foi declara. 

Vale ressaltar que quando falamos de bloco estamos falando uma espa√ßo delimitado com inicio e fim, conforme apresentado na imagem a seguir:

![Capturar_select-area_20230211214823](https://user-images.githubusercontent.com/40298927/218287415-86709b44-08f0-4eee-bfd8-ff06fc5475de.png)

Dito isso, imagine uma variavel criada dentro de um bloco, a mesma se torna inacess√≠vel interpretador sair do bloco de execu√ß√£o, ao qual ela pertence. Com isso esta vari√°vel n√£o pode ser lida ou manipulada por rotinas e c√≥digos que est√£o fora do seu bloco de declara√ß√£o, ou seja, fora do escopo da vari√°vel.

Em uma Classe, podemos visualizar a diferen√ßa de escopos. Os atributos (vari√°veis) s√£o declarados no corpo principal da Classe, sendo portanto, acess√≠veis por todos os m√©todos.

Caso voc√™ declare uma vari√°vel **dentro do m√©todo**, o escopo dessa vari√°vel est√° limitado apenas ao corpo desse m√©todo, ou seja, dentro das chaves que limitam o m√©todo.

![Capturar_select-area_20230211223803](https://user-images.githubusercontent.com/40298927/218288437-307fb3a3-4742-45a7-bfe6-c1f2da0c33e6.png)

**`Entrada de dados`**

Considerando-se que voc√™ precisa que o usu√°rio responda um question√°rio que ir√° apresentar na tela. Nos deparamos com a seguinte pergunta: Como ler o valor que o usu√°rio digitou em seu teclado? A resposta est√° na utiliza√ß√£o da **Classe Scanner do Java.**    

Na linguagem Java, a partir do Java 1.5 ou Java 5.0, o pacote de classes **java.util** disponibilizou a classe Scanner, que implementa opera√ß√µes de entrada de dados pelo teclado.

A classe Scanner possui v√°rios m√©todos que possibilitam a entrada de dados de 
diferentes tipos, entre eles destacam-se:

**`String next()`** - retorna uma cadeia de caracteres simples, ou seja, que n√£o usa o caractere espa√ßo em branco;

**`double nextDouble()`** - retorna um n√∫mero em nota√ß√£o de ponto flutuante normalizada em precis√£o dupla de 64 bits (usado para receber valores reais ou monet√°rios);

**`boolean hasNextDouble()`** - retorna true se o pr√≥ximo dado de entrada pode ser interpretado como um valor double;

**`int nextInt()`** - retorna um n√∫mero inteiro de 32 bits;

**`boolean hasNextInt()`** - retorna true se o pr√≥ximo dado de entrada pode ser interpretado como um valor int;

**`String nextLine()`** - retorna uma cadeia de caracteres, por exemplo: ‚ÄúBlogJava‚Äù;

**`long nextLong()`** - retorna um n√∫mero inteiro de 64 bits.

A seguir podemos v√™ na pr√°tica como podemos utilizar do recurso da Classe Scanner: 

![Capturar_select-area_20230219204710](https://user-images.githubusercontent.com/40298927/219985252-f0ec524c-1923-441d-801c-5d56e5c6cac9.png)

**`Palavras Reservadas`**

![Capturar_select-area_20230302193819](https://user-images.githubusercontent.com/40298927/222576222-ec5e972f-0676-48d4-8493-1d0980caf487.png)

![Capturar_select-area_20230302193909](https://user-images.githubusercontent.com/40298927/222576237-f8bb3f37-9a67-4d81-9edc-3772fe28f9c9.png)


_Fontes: - Book Come√ßando a Programar em Java para Leigos; Book Java para Iniciantes; V√≠deos aulas Isiflix_

:[üëà] <a href="https://github.com/agathapaiiva/blog-java/wiki"> voltar para p√°gina anterior </a>
